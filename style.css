@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Kode+Mono:wght@400..700&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap');


@font-face {
    font-family: 'Advanced Dot Digital-7';
    src: URL('advanced_dot_digital-7.ttf') format('truetype');
}


:root {
    --transition-speed: 1.0s;
}

body {
    margin: 0;
    padding: 0;
    width: 100%;
    background: #0a0a0a;
    overflow-x: hidden;
    transition: --accent var(--transition-speed) ease;
}

.grid-base,
.grid-highlight {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
}

.grid-base {
    background-image:
        linear-gradient(var(--line-color) 1px, transparent 1px),
        linear-gradient(90deg, var(--line-color) 1px, transparent 1px);
    background-size: 3em 3em;
    transition: --line-color var(--transition-speed) ease;
}

.grid-highlight {
    background-image:
        linear-gradient(var(--hl-color) 1px, transparent 1px),
        linear-gradient(90deg, var(--hl-color) 1px, transparent 1px);
    background-size: 3em 3em;
    transition: --hl-color var(--transition-speed) ease;
}

.hero-section {
    height: 100dvh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 3rem;
    font-family: Arial, sans-serif;
    text-transform: uppercase;
    position: relative;
    z-index: 1;
}

#timer {
    font-family: "Advanced Dot Digital-7";
    padding: 10px;
    font-size: 144px;
    padding: 50px 50px 10px 50px;
    text-align: center;
}

#hero-1 {
    display: flex;
    flex-direction: column;
}

#hero-1>h1 {
    font-family: JetBrains Mono;
    font-weight: lighter;
}

#butons {
    display: flex;
    gap: 20px;

    justify-content: center;

    margin-top: 20px;

}


.cool-red-button {
    width: 100%;
    height: 62px;
    cursor: pointer;
    color: #fff;
    font-size: 17px;
    border-radius: 1rem;
    border: none;
    position: relative;
    background: #d70000;
    transition: 0.1s;
}

.cool-red-button::after {
    content: '';
    width: 100%;
    height: 100%;
    background-image: radial-gradient(circle farthest-corner at 10% 20%, red 17.8%, black 100.2%);
    filter: blur(15px);
    z-index: -1;
    position: absolute;
    left: 0;
    top: 0;
}

.cool-red-button:active {
    transform: scale(0.9) rotate(3deg);
    background: radial-gradient(circle farthest-corner at 10% 20%, darkred 17.8%, grey 100.2%);
    transition: 0.5s;
}

.cool-blue-button {
    width: 100%;
    height: 62px;
    cursor: pointer;
    color: #fff;
    font-size: 17px;
    border-radius: 1rem;
    border: none;
    position: relative;
    background: #0000d7;
    transition: 0.1s;
}

.cool-blue-button::after {
    content: 'nigg';
    width: 100%;
    height: 100%;
    background-image: radial-gradient(circle farthest-corner at 10% 20%, black 17.8%, blue 100.2%);
    filter: blur(15px);
    z-index: -1;
    position: absolute;
    left: 0;
    top: 0;
}

.cool-blue-button:active {
    transform: scale(0.9) rotate(3deg);
    background: radial-gradient(circle farthest-corner at 10% 20%, darkblue 17.8%, grey 100.2%);
    transition: 0.5s;
}

#hero-2 {
    flex-direction: column;
    height: 200dvh;
    margin-left: 50px;
    margin-right: 50px;
    margin-top: 50px;
}

@media screen and (max-width: 768px) {
    #hero-2 {
        margin-left: 1rem;
        margin-right: 1rem;
    }
}

#hero-2 .scroller-section {
    width: 100%;
    padding: 0 5px;
}

.slider {
    width: 90%;
    height: var(--height);
    overflow: hidden;
    mask-image: linear-gradient(to right,
            transparent,
            #000 5% 95%,
            transparent);
}

.slider .list {
    display: flex;
    width: 100%;
    min-width: calc((var(--width) + var(--gap)) * var(--quantity));
    position: relative;
    gap: var(--gap);
}

.slider .list .item {
    width: var(--width);
    height: var(--height);
    margin-right: var(--gap);
    position: absolute;
    left: 100%;
    animation: autoRun 10s linear infinite;
    transition: filter 0.5s;
    animation-delay: calc((10s / var(--quantity)) * (var(--position) - 1) - 10s) !important;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    border-radius: 16px;
    overflow: hidden;
}

.slider .list>h3 {
    background-color: var(--accent);
}

.slider .list .item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 16px;
    transition: transform 0.3s ease;
}

.slider .list .item:hover img {
    transform: scale(1.1);
}

.slider[reverse="true"] .item {
    animation: reversePlay 10s linear infinite;
}

@keyframes reversePlay {
    from {
        left: calc(var(--width) * -1);
    }

    to {
        left: 100%;
    }
}

div .scroller-section {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.text-slider {
    margin-bottom: 20px;
}

.text-item {
    border-radius: 12px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.text-item h3 {
    margin: 0;
    color: white;
    font-size: 1.5rem;
    margin: 0px 501px;
}


/* Core functionality */
#animated-text-strip {
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    overflow: hidden;
}

#animated-text-strip .marquee {
    white-space: nowrap;
    animation: marquee 5s linear infinite;
    max-width: none;
}

@keyframes marquee {
    0% {
        transform: translate(0, 0);
    }

    100% {
        transform: translate(-100%, 0);
    }
}

/* Styles for the sake of the demonstration */
#animated-text-strip {
    padding: 1rem 0;
}

.marquee {
    font-family: JetBrains Mono;
    font-size: 2rem;
    font-weight: 900;
    text-transform: uppercase;
    color: white;
    margin: 0px 50px;
    padding: 0px 50px;
    background-color: var(--accent);
    transition: background-color var(--transition-speed) ease;
}


h1 span {
    color: var(--accent);
    font-weight: bold;
    transition: color var(--transition-speed) ease;
}


// from http://inertia-momentum-scroll.webflow.io/vanilla-js-version 
// CJHersh https://webflow.com/CJHersh

// First we get the elements we need, the body and our container on which
// we are going to apply a smooth scroll. You will always need a container
// to apply a smooth scroll. You will not be able to apply it directly to
// the body.
const body=document.body;
const main=document.querySelector('main');

// We define variables we will need later. 
// 2 variables to store the scroll position and 2 variables to store the 
// container position.
let sx=0;
let sy=0;

let dx=sx;
let dy=sy;

// The trick is to set a height to the body to keep the browser scroll bar.
body.style.height=main.clientHeight+'px';

// Then we fix our container so it won't move when the user scrolls.
// We will move it ourself with the Linear Interpolation and translations.
main.style.position='fixed';
main.style.top=0;
main.style.left=0;

// We bind a scroll event to the window to watch scroll position.
window.addEventListener('scroll', scroll);

function scroll() {
    // We only update the scroll position variables
    sx=window.pageXOffset;
    sy=window.pageYOffset;
}

// Then we start a `requestAnimationFrame` loop. 

window.requestAnimationFrame(render);

function render() {
    // We calculate our container position by using our Linear Interpolation method.
    dx=lerp(dx, sx, 0.05);
    dy=lerp(dy, sy, 0.05);

    dx=Math.floor(dx * 100) / 100;
    dy=Math.floor(dy * 100) / 100;

    console.log(dy);

    // Finally we translate our container to its new positions.
    // Don't forget to add a minus sign because the container needs to move in 
    // the opposite direction of the window scroll.
    main.style.transform=`translate(-$ {
            dx
        }

        px, -$ {
            dy
        }

        px)`;

    // And we loop again.
    window.requestAnimationFrame(render);
}

// This is our Linear Interpolation method.
function lerp(a, b, n) {
    return (1 - n) * a+n * b;
}